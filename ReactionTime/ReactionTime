import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class ReactionTimeGame implements Runnable {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new ReactionTimeGame());
    }

    private long reactionTime;

    private DrawingPanel drawingPanel;

    private JTextField reactionTimeField;

    public ReactionTimeGame() {
        this.reactionTime = 0L;
    }

    @Override
    public void run() {
        JFrame frame = new JFrame("Mini Game: Reaction Time");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.add(createUpperPanel(), BorderLayout.BEFORE_FIRST_LINE);
        this.drawingPanel = new DrawingPanel();
        frame.add(drawingPanel, BorderLayout.CENTER);
        frame.add(createButtonPanel(), BorderLayout.AFTER_LAST_LINE);

        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

    private JPanel createUpperPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        JPanel innerPanel = new JPanel(new FlowLayout());

        String instructions = "Click to start the game and click again once you see the circle! "
                + "Let's test your reaction time :)";

        JTextArea textArea = new JTextArea(7, 40);
        textArea.setEditable(false);
        textArea.setText(instructions);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        innerPanel.add(textArea);

        panel.add(innerPanel, BorderLayout.BEFORE_FIRST_LINE);

        innerPanel = new JPanel(new FlowLayout());

        JLabel label = new JLabel("Reaction Time:");
        innerPanel.add(label);

        reactionTimeField = new JTextField(5);
        reactionTimeField.setEditable(false);
        updateReactionTime();
        innerPanel.add(reactionTimeField);

        label = new JLabel("seconds");
        innerPanel.add(label);

        panel.add(innerPanel, BorderLayout.AFTER_LAST_LINE);

        return panel;
    }

    private JPanel createButtonPanel() {
        JPanel panel = new JPanel(new FlowLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        JButton button = new JButton("Click");
        button.addActionListener(new ButtonListener());
        panel.add(button);

        return panel;
    }

    public void setReactionTime(long reactionTime) {
        this.reactionTime = reactionTime;
    }

    public void drawCircle() {
        drawingPanel.setDrawCircle(true);
        drawingPanel.repaint();
    }

    public void eraseCircle() {
        drawingPanel.setDrawCircle(false);
        drawingPanel.repaint();
    }

    public void updateReactionTime() {
        double time = 0.001 * reactionTime;
        reactionTimeField.setText(String.format("%.1f", time));
    }

    public class DrawingPanel extends JPanel {

        private static final long serialVersionUID = 1L;

        private boolean drawCircle;

        public DrawingPanel() {
            this.drawCircle = false;
            this.setPreferredSize(new Dimension(100, 300));
        }

        public void setDrawCircle(boolean drawCircle) {
            this.drawCircle = drawCircle;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            if (drawCircle) {
                int centerX = getWidth() / 2;
                int centerY = getHeight() / 2;
                int radius = Math.min(getWidth(), getHeight()) * 9 / 20;
                int diameter = radius + radius;
                g.setColor(Color.RED);
                g.fillOval(centerX - radius, centerY - radius, diameter, diameter);
            }
        }

    }

    public class ButtonListener implements ActionListener {

        private int state;

        private long startTime;

        private final Random random;

        private Timer timer;

        public ButtonListener() {
            this.state = 1;
            this.random = new Random();
        }

        @Override
        public void actionPerformed(ActionEvent event) {
            switch (state) {
                case 1:
                    int delay = random.nextInt(2000) + 2000;
                    timer = new Timer(delay, new TimerListener(this));
                    timer.start();
                    state = 2;
                    break;
                case 2:
                    setEndTime(System.currentTimeMillis());
                    eraseCircle();
                    state = 1;
                    break;
            }
        }

        public int getState() {
            return state;
        }

        public void setStartTime(long startTime) {
            this.startTime = startTime;
        }

        public void setEndTime(long endTime) {
            long elapsedTime = endTime - startTime;
            setReactionTime(elapsedTime);
            updateReactionTime();
        }

    }

    public class TimerListener implements ActionListener {

        private final ButtonListener listener;

        public TimerListener(ButtonListener listener) {
            this.listener = listener;
        }

        @Override
        public void actionPerformed(ActionEvent event) {
            Timer timer = (Timer) event.getSource();
            timer.stop();

            if (listener.getState() == 2) {
                listener.setStartTime(System.currentTimeMillis());
                drawCircle();
            }
        }

    }

}